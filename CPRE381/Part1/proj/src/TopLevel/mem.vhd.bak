-- Quartus Prime VHDL Template
-- Single-port RAM with single read/write address

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity mem is

	generic 
	(
		DATA_WIDTH : natural := 32;
		ADDR_WIDTH : natural := 10
	);

	port 
	(
		clk		: in std_logic;
		addr	        : in std_logic_vector((ADDR_WIDTH-1) downto 0);
		data	        : in std_logic_vector((DATA_WIDTH-1) downto 0);
		we		: in std_logic := '1';
		q		: out std_logic_vector((DATA_WIDTH -1) downto 0)
	);

end mem;

architecture rtl of mem is
	
	constant memory_size : integer := (2**ADDR_WIDTH) * 4; -- size of memory in bytes: 2^10 * 4

	-- Build a 2-D array type for the RAM
	subtype byte_t is std_logic_vector(7 downto 0);  			-- Byte accessable
	type memory_t is array(memory_size-1 downto 0) of byte_t;	-- Array of bytes

	-- Declare the RAM signal and specify a default value.	Quartus Prime
	-- will load the provided memory initialization file (.mif).
	signal ram : memory_t;

begin

	process(clk)
	begin
	if(rising_edge(clk)) then
		if(we = '1') then
			ram(to_integer(unsigned(addr))) <= data(7 downto 0);
			ram(to_integer(unsigned(addr+1))) <= data(15 downto 8);
			ram(to_integer(unsigned(addr+2))) <= data(24 downto 16);
			ram(to_integer(unsigned(addr+3))) <= data(32 downto 25);
		end if;
	end if;
	end process;

	q <= ram(to_integer(unsigned(addr+3))) & ram(to_integer(unsigned(addr+2))) & ram(to_integer(unsigned(addr+1))) & ram(to_integer(unsigned(addr)));

end rtl;
